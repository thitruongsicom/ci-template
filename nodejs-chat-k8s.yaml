apiVersion: apps/v1
kind: Deployment
metadata:
  labels:
    app: tts-${PROJECT_NAME}-master
    service: ${PROJECT_NAME}-master
    version: "${PROJECT_APP_VERSION}"
    service_framework: nodejs
  annotations:
    docker_tag: "${DOCKER_TAG}"
  name: ${PROJECT_NAME}-master
spec:
  selector:
    matchLabels:
      app: tts-${PROJECT_NAME}-master
  replicas: 1
  strategy:
    type: RollingUpdate
    rollingUpdate:
      maxUnavailable: 0
      maxSurge: 1
  template:
    metadata:
      labels:
        app: tts-${PROJECT_NAME}-master
        service: ${PROJECT_NAME}-master
        version: "${PROJECT_APP_VERSION}"
    spec:
      containers:
        - image: $CI_REGISTRY_IMAGE:$DOCKER_TAG
          name: ${PROJECT_NAME}-master
          env:
            - name: TZ
              value: "Asia/Ho_Chi_Minh"
            - name: CLUSTER_IS_MASTER
              value: "yes"
          envFrom:
            - configMapRef:
                name: ${PROJECT_NAME}
          ports:
            - name: http-api
              containerPort: 8080
          readinessProbe:
            httpGet:
              path: /
              port: 8080
              httpHeaders:
                - name: Content-Type
                  value: application/json
            initialDelaySeconds: 30
            periodSeconds: 3
          resources:
            requests:
              memory: ${MEM_MIN}
              cpu: ${CPU_MIN}
            limits:
              memory: ${MEM_MAX}
              cpu: ${CPU_MAX}
      restartPolicy: Always
      imagePullSecrets:
        - name: tts
        

---
apiVersion: apps/v1
kind: Deployment
metadata:
  labels:
    app: tts-${PROJECT_NAME}
    service: ${PROJECT_NAME}
    version: "${PROJECT_APP_VERSION}"
    service_framework: nodejs
  annotations:
    docker_tag: "${DOCKER_TAG}"
  name: ${PROJECT_NAME}
spec:
  selector:
    matchLabels:
      app: tts-${PROJECT_NAME}
  replicas: ${SCALE_MIN}
  strategy:
    type: RollingUpdate
    rollingUpdate:
      maxUnavailable: 0
      maxSurge: 2
  template:
    metadata:
      labels:
        app: tts-${PROJECT_NAME}
        service: ${PROJECT_NAME}
        version: "${PROJECT_APP_VERSION}"
    spec:
      containers:
        - image: $CI_REGISTRY_IMAGE:$DOCKER_TAG
          name: ${PROJECT_NAME}
          env:
            - name: TZ
              value: "Asia/Ho_Chi_Minh"
          envFrom:
            - configMapRef:
                name: ${PROJECT_NAME}
          ports:
            - name: http-api
              containerPort: 8080
          readinessProbe:
            httpGet:
              path: /
              port: 8080
              httpHeaders:
                - name: Content-Type
                  value: application/json
            initialDelaySeconds: 30
            periodSeconds: 3
          resources:
            requests:
              memory: ${MEM_MIN}
              cpu: ${CPU_MIN}
            limits:
              memory: ${MEM_MAX}
              cpu: ${CPU_MAX}
      restartPolicy: Always
      imagePullSecrets:
        - name: tts
        
---
apiVersion: v1
kind: Service
metadata:
  labels:
    app: tts-${PROJECT_NAME}
    service: ${PROJECT_NAME}
  name: ${PROJECT_NAME}
spec:
  selector:
    service: ${PROJECT_NAME}
  ports:
    - name: http-${PROJECT_NAME}
      port: 8080
      targetPort: http-api
---
apiVersion: autoscaling/v2beta1
kind: HorizontalPodAutoscaler
metadata:
  name: ${PROJECT_NAME}
spec:
  scaleTargetRef:
    apiVersion: apps/v1
    kind: Deployment
    name: ${PROJECT_NAME}
  minReplicas: ${SCALE_MIN}
  maxReplicas: ${SCALE_MAX}
  metrics:
    - type: Resource
      resource:
        name: cpu
        targetAverageUtilization: 80

---
apiVersion: networking.istio.io/v1alpha3
kind: Gateway
metadata:
  name: mqtt-gateway
spec:
  selector:
    istio: ingressgateway
  servers:
    - port:
        number: 80
        name: http
        protocol: HTTP
      hosts:
        - "api-mqtt.thitruongsi.svc"
---
apiVersion: networking.istio.io/v1alpha3
kind: VirtualService
metadata:
  name: ${PROJECT_NAME}-services
spec:
  hosts:
    - "api-mqtt.thitruongsi.svc"
  gateways:
    - mqtt-gateway
  http:
    - match:
        - uri:
            prefix: /${PROJECT_NAME}/
      rewrite:
        uri: /
      route:
        - destination:
            host: ${PROJECT_NAME}
            port:
              number: 8080
