apiVersion: extensions/v1beta1
kind: Deployment
metadata:
  labels:
    service: ${PROJECT_NAME}
    service_framework: laravel
  annotations:
    docker_tag: "${DOCKER_TAG}"
  name: ${PROJECT_NAME}
spec:
  replicas: ${SCALE_MIN}
  strategy:
    type: RollingUpdate
    rollingUpdate:
      maxUnavailable: 1
      maxSurge: 1
  template:
    metadata:
      labels:
        service: ${PROJECT_NAME}
    spec:
      containers:
        - image: $CI_REGISTRY_IMAGE:$DOCKER_TAG
          name: ${PROJECT_NAME}
          envFrom:
          - configMapRef:
              name: ${PROJECT_NAME}
          ports:
          - name: http-api
            containerPort: 80
          readinessProbe:
            httpGet:
              path: /
              port: 80
            initialDelaySeconds: 30
            periodSeconds: 3
          resources:
            requests:
              memory: ${MEM_MIN}
              cpu: ${CPU_MIN}
            limits:
              memory: ${MEM_MAX}
              cpu: ${CPU_MAX}
      restartPolicy: Always
      imagePullSecrets:
        - name: tts
---
apiVersion: v1
kind: Service
metadata:
  labels:
    service: ${PROJECT_NAME}
  name: ${PROJECT_NAME}
  annotations:
    getambassador.io/config: |
      ---
      apiVersion: ambassador/v1
      kind:  Mapping
      name:  ${PROJECT_NAME}_mapping
      prefix: /${PROJECT_NAME}/
      service: ${PROJECT_NAME}
spec:
  selector:
    service: ${PROJECT_NAME}
  ports:
  - name: http
    port: 80
    targetPort: http-api
  type: LoadBalancer
  externalTrafficPolicy: Local
---
apiVersion: autoscaling/v2beta1
kind: HorizontalPodAutoscaler
metadata:
  name: ${PROJECT_NAME}
spec:
  scaleTargetRef:
    apiVersion: extensions/v1beta1
    kind: Deployment
    name: ${PROJECT_NAME}
  minReplicas: ${SCALE_MIN}
  maxReplicas: ${SCALE_MAX}
  metrics:
    - type: Resource
      resource:
        name: cpu
        targetAverageUtilization: 80